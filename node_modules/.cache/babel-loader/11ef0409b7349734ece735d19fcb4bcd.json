{"ast":null,"code":"module.exports = function (url) {\n  const req = new XMLHttpRequest();\n  return new Promise((resolve, reject) => {\n    req.onreadystatechange = function () {\n      if (this.readyState == 4) {\n        if (this.status == 200) {\n          let response = JSON.parse(this.response);\n          resolve(response);\n        } else {\n          let err = JSON.parse(this.response);\n          reject(err);\n        }\n      }\n    };\n\n    req.onerror = function (e) {\n      reject(new Error(this.statusText));\n    };\n\n    req.open('GET', url, true);\n    req.send(null);\n  });\n};","map":{"version":3,"sources":["/Users/jo/Desktop/netflix/node_modules/youtube-api-v3-search/src/request/browser-request.js"],"names":["module","exports","url","req","XMLHttpRequest","Promise","resolve","reject","onreadystatechange","readyState","status","response","JSON","parse","err","onerror","e","Error","statusText","open","send"],"mappings":"AAEAA,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAa;AAC1B,QAAMC,GAAG,GAAI,IAAIC,cAAJ,EAAb;AACA,SAAO,IAAIC,OAAJ,CAAY,CAAEC,OAAF,EAAYC,MAAZ,KAAsB;AACvCJ,IAAAA,GAAG,CAACK,kBAAJ,GAAyB,YAAW;AAClC,UAAI,KAAKC,UAAL,IAAmB,CAAvB,EAAyB;AACvB,YAAG,KAAKC,MAAL,IAAe,GAAlB,EAAsB;AACpB,cAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKF,QAAhB,CAAf;AACAL,UAAAA,OAAO,CAACK,QAAD,CAAP;AACD,SAHD,MAGK;AACH,cAAIG,GAAG,GAAGF,IAAI,CAACC,KAAL,CAAW,KAAKF,QAAhB,CAAV;AACAJ,UAAAA,MAAM,CAACO,GAAD,CAAN;AACF;AACF;AACF,KAVA;;AAWAX,IAAAA,GAAG,CAACY,OAAJ,GAAc,UAASC,CAAT,EAAW;AACvBT,MAAAA,MAAM,CAAC,IAAIU,KAAJ,CAAW,KAAKC,UAAhB,CAAD,CAAN;AACD,KAFD;;AAGAf,IAAAA,GAAG,CAACgB,IAAJ,CAAS,KAAT,EAAejB,GAAf,EAAmB,IAAnB;AACAC,IAAAA,GAAG,CAACiB,IAAJ,CAAS,IAAT;AACH,GAjBQ,CAAP;AAmBH,CArBD","sourcesContent":["\n\nmodule.exports = function(url){\n    const req  = new XMLHttpRequest();\n    return new Promise(( resolve , reject )=>{\n      req.onreadystatechange = function() {\n        if (this.readyState == 4){\n          if(this.status == 200){\n            let response = JSON.parse(this.response);\n            resolve(response);\n          }else{\n            let err = JSON.parse(this.response);\n            reject(err);\n         }\n       }\n     }\n      req.onerror = function(e){\n        reject(new Error (this.statusText) );\n      }\n      req.open('GET',url,true);\n      req.send(null);\n  });\n\n}\n"]},"metadata":{},"sourceType":"script"}